<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ken_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set and declare common variables 

//Set animation speed
image_speed = 0.25;

//Set flag variables
attack = 0;
walking = 0;
jumping = 0;
special = 0;

//Set variables for our special moves system
keylog = "";
dupes_allowed = 6;
cut_off = 24;

//Set movement variables
max_speed = 6;
acceleration = 2;
fric = 1;
gforce = 0.5;
ground = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set unique variables

//Define buttons
//Need to know what buttons the player can press
b_up = ord("I");
b_right = ord("L");
b_down = ord("K");
b_left = ord("J");
b_lp = ord("Q");

//Setep button codes for special moves
//We need those as the unicodes above do not always have the same amount of digits
//Some special moves require the player to release keys in between other keys
c_up = "A";
c_right = "B";
c_down = "C";
c_left = "D";
c_lp = "E";
c_releases = "#";

//define special moves
hadouken = "CBE"; // down, right, low punch
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update keylog

//log all keys
if keyboard_check(b_up)              {keylog += c_up; }
if keyboard_check(b_right)           {keylog += c_right; }
if keyboard_check(b_down)            {keylog += c_down; }
if keyboard_check(b_left)            {keylog += c_left; }
if keyboard_check(b_lp)              {keylog += c_lp; }
if !keyboard_check(vk_anykey)        {keylog += c_releases; }

//How many keys are we remembering
length = string_length(keylog);

//What was our last key?
last_key = string_char_at(keylog, length);

//debug
//keylog = "DDDDDDSSSSSDDDDDDDDDDDDSSSSSSSSSS";
//message = x_remove_dupes(keylog, dupes_allowed);
//show_debug_message(x_remove_dupes(keylog, dupes_allowed));


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special moves

//No specials while jumping or punching
if (!jumping &amp;&amp; !attack) {


//Specials can only be launched when there is no special ongoing
if (!special) {

checklog = x_remove_dupes(keylog, dupes_allowed);

//Cut keylog at some point
if(length &gt;= cut_off) {
    keylog = string_copy(keylog, length - cut_off + 1, cut_off);
}

//Grab last three keys
last_three = "";
if (string_length(keylog) &gt; 3) {
    last_three = string_copy(checklog, string_length(checklog) - 3 + 1, 3);
}  

//Check for hadouken
if (last_three == hadouken) {
    
    //Set the sprite, state, sound
    sprite_index = s_ken_hadouken;
    image_index = 0;
    special = 1;
    audio_play_sound(z_hadouken, 1, false);
    
    //Spawn fireball object
    projectile = instance_create(x, y, o_projectile);
    projectile.owner = object_get_name(object_index); 
    projectile.sprite_index = s_projectile_hadouken;
    projectile.image_index = 0;
    projectile.image_xscale = image_xscale;
    

}

} else {
    
    //See if the animation has ended
    if (image_index == 0) {
        special = 0;
    }
}

}
//show_debug_message("Keylog: + " + keylog + " =&gt; " + last_three);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks

if (!special &amp;&amp; !jumping) {

    //Regular attacks only happen when no regular attacks are ongoing 
    //We do not use if !special and !attack because we need the else clause on attack to not trigger the reset
    if (!attack) {
    
        //See if we have a low punch
        if (last_key == c_lp) {
        
            //Set sprite and state
            sprite_index = s_ken_lp;
            image_index = 0;
            attack = 1;
            
            //Spawn a hitbox
            hitbox = instance_create(x, y, o_hitbox);
            hitbox.owner = object_get_name(object_index);
            hitbox.sprite_index = s_ken_lp_hb;
            hitbox.image_index = 0;
            hitbox.image_xscale = image_xscale;
            
        }
        
    } else {
    
        //Disable the attack again when the subimage hits zero for the second time, the idle sprite is set once at the end
        if (image_index == 0) { attack = 0; }
    
   } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Horizontal Movement

if (!special &amp;&amp; !attack) {
    
    //Move
    if(abs(hspeed) &lt;= max_speed) {
        if(last_key == c_right) { motion_add(0,   acceleration); }
        if(last_key == c_left)  { motion_add(180, acceleration); }
    }
    
    //Use friction to slow down
    if(hspeed &gt; 0) { hspeed -= fric; }
    if(hspeed &lt; 0) { hspeed += fric; }
    
    
    //Limit the speed
    if(hspeed &gt; max_speed) { hspeed = max_speed; }
    if(hspeed &lt; - max_speed) { hspeed = - max_speed; }
    
} else {
    hspeed = 0;
}

//Set the sprite and walking state, idle sprite is set at the end
if(abs(hspeed) &gt; 0 &amp;&amp; !jumping) {
    sprite_index = s_ken_walk;
    walking = 1;
} else {
    walking = 0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping

//No jumping during special moves or attacks
if(!special &amp;&amp; !attack) {

    //We only jump when we are not already jumping
    if(!jumping) {
        //Jump up
        //We cannot use check lastkey because up should override any other key press
        if(keyboard_check_pressed(b_up)) {
            motion_add(90, 10);
            sprite_index = s_ken_jump;
            image_index = 0;
            jumping = 1;
        }
    } else {
    
        if (y &gt;= ground) {
            vspeed = 0;
            y = ground;
            jumping = 0;
        } else {
            motion_add(270, gforce);
        }    
    
    }
        
}

//Manage jump animation manually
if(jumping) {
    if((abs(ground - y)) == 0) {
        image_index = 0;
    }
    if((abs(ground - y)) &gt; 0 &amp;&amp; (abs(ground - y)) &lt;= 25)  {
        image_index = 1;
    }
    if((abs(ground - y)) &gt; 25 &amp;&amp; (abs(ground - y)) &lt;= 50) {
        image_index = 2;
    }
    if((abs(ground - y) &gt; 50)) {
        image_index = 3;
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Idle

//Set the idle if no flag variables are active
if (!special &amp;&amp; !attack &amp;&amp; !walking &amp;&amp; !jumping) {
    sprite_index = s_ken_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>52,52</point>
  </PhysicsShapePoints>
</object>
